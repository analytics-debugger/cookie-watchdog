!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).CookieWatchdog=t()}(this,(function(){"use strict";const e={watchers:new Map,checkCookieStoreApi:()=>"undefined"!=typeof window&&"cookieStore"in window||(console.error("cookieStore API is not supported in this browser."),!1),getCookie(e){const t=document.cookie.match(new RegExp("(^| )"+e+"=([^;]+)"));return t?decodeURIComponent(t[2]):null},watch(e,t){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{untilReady:!1};if("undefined"==typeof window)throw new Error("This needs to run in a browser.");if("function"!=typeof t)throw new Error(`The callback for ${e} must be a function.`);if(!this.checkCookieStoreApi())throw new Error("cookieStore API not available");this.listener=e=>{const o=e.changed.filter((e=>this.watchers.has(e.name))),n=e.deleted.filter((e=>this.watchers.has(e.name)));o.length>0&&o.forEach((e=>{const o=this.watchers.get(e.name),n=o.value===e.value?"unchanged":null===o.value?"created":"updated";t({name:e.name,value:e.value,type:n}),o.options?.untilReady&&"created"===n&&this.unwatch(e.name),o.value=e.value,this.watchers.set(e.name,o)})),n.length>0&&n.forEach((e=>{const o=this.watchers.get(e.name);o.value=null,t({name:e.name,value:e.value,type:"deleted"}),this.watchers.set(e.name,o)}))},0===this.watchers.size&&(console.log("ADD GLOBAL LISTENER"),window.cookieStore.addEventListener("change",this.listener));if(this.watchers.get(e))throw new Error(`A listener already exists for the cookie: ${e}`);{console.log(arguments);const n=this.getCookie(e);this.watchers.set(e,{value:n,callback:t,options:o}),t({name:e,value:n,type:null!==n?"existing":"missing"}),null!==n&&o?.untilReady&&this.unwatch(e)}},unwatch(e){"undefined"!=typeof window&&this.watchers.has(e)&&(console.log("REMOVING LISTENER FOR COOKIE",e),this.watchers.delete(e),0===this.watchers.size&&(console.log("REMOVE GLOBAL LISTENER "),window.cookieStore.removeEventListener("change",this.listener)))}};return{watch:e.watch.bind(e),unwatch:e.unwatch.bind(e)}}));
