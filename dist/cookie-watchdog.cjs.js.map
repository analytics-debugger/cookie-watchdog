{"version":3,"file":"cookie-watchdog.cjs.js","sources":["../src/index.js"],"sourcesContent":["const CookieWatchdog = {\r\n    // Internal state: Maps to store cookies and respective callbacks\r\n    watches: new Map(),\r\n    cookieCache: new Map(),\r\n\r\n    // Internal: Check for cookieStore API support in the current environment\r\n    checkCookieStoreApi() {\r\n        if (typeof window === 'undefined' || !(\"cookieStore\" in window)) {\r\n            console.error(\"cookieStore API is not supported in this browser.\");\r\n            return false;\r\n        }\r\n    },\r\n\r\n    // Internal: Get the value of a specific cookie\r\n    getCookie(name) {\r\n        const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\r\n        return match ? decodeURIComponent(match[2]) : null;\r\n    },\r\n\r\n    // Internal: Handle changes in cookies, including updates and deletions\r\n    handleCookieChange(event) {\r\n        // Handle updated or created cookies\r\n        event.changed.forEach(change => {\r\n            const previousState = this.cookieCache.get(change.name);\r\n            const newValue = this.getCookie(change.name);\r\n\r\n            let operationType = \"unchanged\";\r\n\r\n            // Determine the type of change (created, updated, or unchanged)\r\n            if (previousState) {\r\n                if (previousState.deleted) {\r\n                    operationType = \"created\";\r\n                } else if (previousState.value !== newValue) {\r\n                    operationType = \"updated\";\r\n                }\r\n            } else {\r\n                operationType = \"created\";\r\n            }\r\n\r\n            // Notify watchers if the cookie value has changed\r\n            if (operationType !== \"unchanged\") {\r\n                this.cookieCache.set(change.name, { value: newValue, deleted: false });\r\n                this.notifyWatchers(change.name, { name: change.name, value: newValue, type: operationType });\r\n            }\r\n        });\r\n\r\n        // Handle cookie deletions\r\n        event.deleted.forEach(deletion => {\r\n            const cachedValue = this.cookieCache.get(deletion.name) || null;\r\n            this.cookieCache.set(deletion.name, { value: null, deleted: true });\r\n            this.notifyWatchers(deletion.name, { name: deletion.name, value: cachedValue, type: \"deleted\" });\r\n        });\r\n    },\r\n\r\n    // Internal: Notify all watchers for a given cookie\r\n    notifyWatchers(cookieName, changeInfo) {\r\n        if (this.watches.has(cookieName)) {\r\n            this.watches.get(cookieName).forEach(callback => callback(changeInfo));\r\n        }\r\n    },\r\n\r\n    // Public: Start watching a specific cookie for changes\r\n    watch(cookieName, callback, untilReady = false) {\r\n        if (typeof window === 'undefined') return;\r\n        // Ensure callback is a function\r\n        if (typeof callback !== 'function') {\r\n            throw new Error(`The callback for ${cookieName} must be a function.`);\r\n        }\r\n\r\n        this.checkCookieStoreApi();\r\n\r\n        // Ensure only one listener exists for each cookie\r\n        if (this.watches.has(cookieName)) {\r\n            throw new Error(`A listener already exists for the cookie: ${cookieName}`);\r\n        }\r\n\r\n        // Define a listener function to handle the cookie changes\r\n        const listener = (event) => {\r\n            this.handleCookieChange(event);\r\n\r\n            // Flag to stop listening after the first event that matches the conditions\r\n            let stopListening = false;\r\n            if(event.changed && event.changed.length > 0) {\r\n                event.changed.forEach((change) => {\r\n                    if (this.watches.has(change.name)) {\r\n                        // Notify the callback about the change\r\n                        const newValue = this.getCookie(change.name);\r\n                        callback({\r\n                            name: change.name,\r\n                            value: newValue,\r\n                            type: change.deleted ? 'deleted' : 'updated',\r\n                        });\r\n\r\n                        // If 'untilReady' is true, stop listening on 'existing', 'updated', or 'created' events\r\n                        if (untilReady && (newValue !== null || change.deleted || change.name !== undefined)) {\r\n                            stopListening = true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // If 'untilReady' is true, remove the event listener after the first 'existing', 'update', or 'create'\r\n            if (stopListening) {\r\n                window.cookieStore.removeEventListener('change', listener);\r\n            }\r\n        };\r\n\r\n        // Add the event listener to monitor cookie changes\r\n        if (this.watches.size === 0) {\r\n            window.cookieStore.addEventListener('change', listener);\r\n        }\r\n\r\n        // Store the watch for the cookie\r\n        this.watches.set(cookieName, [callback]);\r\n\r\n        // Retrieve and cache the current cookie value\r\n        const existingCookie = this.getCookie(cookieName);\r\n        const initialValue = existingCookie || null;\r\n\r\n        // Store the initial cookie state in cache\r\n        this.cookieCache.set(cookieName, { value: initialValue, deleted: initialValue === null });\r\n\r\n        // Notify the watcher with the initial state\r\n        callback({\r\n            name: cookieName,\r\n            value: initialValue,\r\n            type: initialValue !== null ? 'existing' : 'missing', // Type depends on cookie presence\r\n        });\r\n    },\r\n\r\n\r\n    // Public: Stop watching a specific cookie\r\n    unwatch(cookieName) {\r\n        if (typeof window === 'undefined') return;\r\n\r\n        // Remove all watchers for the specified cookie\r\n        if (this.watches.has(cookieName)) {\r\n            this.watches.delete(cookieName);\r\n            this.cookieCache.delete(cookieName);\r\n\r\n            // Remove event listener if no watches remain\r\n            if (this.watches.size === 0) {\r\n                window.cookieStore.removeEventListener(\"change\", this.handleCookieChange.bind(this));\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// Expose the public methods for external use\r\nexport default {\r\n    watch: CookieWatchdog.watch.bind(CookieWatchdog),\r\n    unwatch: CookieWatchdog.unwatch.bind(CookieWatchdog)\r\n};\r\n"],"names":["CookieWatchdog","watches","Map","cookieCache","checkCookieStoreApi","window","console","error","getCookie","name","match","document","cookie","RegExp","decodeURIComponent","handleCookieChange","event","changed","forEach","change","previousState","get","newValue","operationType","deleted","value","set","notifyWatchers","type","deletion","cachedValue","cookieName","changeInfo","has","callback","watch","untilReady","arguments","length","undefined","Error","listener","stopListening","cookieStore","removeEventListener","size","addEventListener","existingCookie","initialValue","unwatch","delete","bind"],"mappings":"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"}